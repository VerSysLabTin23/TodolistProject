name: todo-dev
# include services that are implemented
services:
  task-db:
    image: mysql:8.0
    container_name: task_mysql
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: tasksdb
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppass"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [app-net]

  team-db:
    image: mysql:8.0
    container_name: team_mysql
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: teamsdb
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppass"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [app-net]

  # Team service migration
  team-dbmate:
    image: amacneil/dbmate:latest
    container_name: team_dbmate
    depends_on:
      team-db:
        condition: service_healthy
    environment:
      DATABASE_URL: "mysql://root:pass@team-db:3306/teamsdb?parseTime=true&loc=UTC&charset=utf8mb4"
    volumes:
      - ./team/migrations:/db/migrations:ro
    command: ["--wait", "up"]
    restart: "no"
    networks: [app-net]

  # Team service
  team-service:
    build:
      context: ./team
      dockerfile: ./Dockerfile
    container_name: team_service
    depends_on:
      team-db:
        condition: service_healthy
      team-dbmate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      PORT: "8083"
      DB_HOST: "team-db"
      DB_PORT: "3306"
      DB_USER: "root"
      DB_PASS: "pass"
      DB_NAME: "teamsdb"
      AUTH_SERVICE_URL: "http://auth-service:8084"
      KAFKA_BROKERS: "dev_kafka:9092"
    ports:
      - "8083:8083"
    networks: [app-net]

  # Task service migration (runs after team service is ready)
  dbmate:
    image: amacneil/dbmate:latest
    container_name: task_dbmate
    depends_on:
      task-db:
        condition: service_healthy
      team-service:
        condition: service_started
    environment:
      DATABASE_URL: "mysql://root:pass@task-db:3306/tasksdb?parseTime=true&loc=UTC&charset=utf8mb4"
    volumes:
      - ./task/migrations:/db/migrations:ro
    command: ["--wait", "up"]
    restart: "no"
    networks: [app-net]

  # Task service
  task-service:
    build:
      context: ./task
      dockerfile: ./Dockerfile
    container_name: task_service
    depends_on:
      task-db:
        condition: service_healthy
      team-service: # Depends on team-service for API calls
        condition: service_started
      auth-service: # Depends on auth-service for user validation
        condition: service_started
      kafka: # Depends on Kafka for event publishing
        condition: service_started
      dbmate:
        condition: service_completed_successfully
    environment:
      PORT: "8081"
      DB_HOST: "task-db"
      DB_PORT: "3306"
      DB_USER: "root"
      DB_PASS: "pass"
      DB_NAME: "tasksdb"
      TEAM_SERVICE_URL: "http://team-service:8083"
      AUTH_SERVICE_URL: "http://auth-service:8084"
      KAFKA_BROKERS: "dev_kafka:9092"
    ports:
      - "8081:8081"
    networks: [app-net]

  # Task phpMyAdmin
  task-phpmyadmin:
    image: phpmyadmin:latest
    container_name: task_phpmyadmin
    depends_on:
      task-db:
        condition: service_healthy
    environment:
      PMA_HOST: task-db      
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: pass
      UPLOAD_LIMIT: 64M      
    ports:
      - "8082:80"              
    networks: [app-net]

  # Team phpMyAdmin
  # team-phpmyadmin:
  #   image: phpmyadmin:latest
  #   container_name: team_phpmyadmin
  #   depends_on:
  #     team-db:
  #       condition: service_healthy
  #   environment:
  #     PMA_HOST: team-db
  #     PMA_PORT: 3306
  #     PMA_USER: root
  #     PMA_PASSWORD: pass
  #     UPLOAD_LIMIT: 64M
  #   ports:
  #     - "8088:80"
  #   networks: [app-net]

  auth-db:
    image: mysql:8.0
    container_name: auth_mysql
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: authdb
    ports:
      - "3309:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppass"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [app-net]

  auth-dbmate:
    image: amacneil/dbmate:latest
    container_name: auth_dbmate
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      DATABASE_URL: "mysql://root:pass@auth-db:3306/authdb?parseTime=true&loc=UTC&charset=utf8mb4"
    volumes:
      - ./auth/migrations:/db/migrations:ro
    command: ["--wait", "up"]
    restart: "no"
    networks: [app-net]

  auth-service:
    build:
      context: ./auth
      dockerfile: ./Dockerfile
    container_name: auth_service
    depends_on:
      auth-db:
        condition: service_healthy
      auth-dbmate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    environment:
      PORT: "8084"
      DB_HOST: "auth-db"
      DB_PORT: "3306"
      DB_USER: "root"
      DB_PASS: "pass"
      DB_NAME: "authdb"
      JWT_SECRET: "your-secret-key-change-in-production"
      JWT_ACCESS_TTL: "15m"
      JWT_REFRESH_TTL: "168h"
      KAFKA_BROKERS: "dev_kafka:9092"
    ports:
      - "8084:8084"
    networks: [app-net]

  auth-phpmyadmin:
    image: phpmyadmin:latest
    container_name: auth_phpmyadmin
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      PMA_HOST: auth-db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: pass
      UPLOAD_LIMIT: 64M
    ports:
      - "8085:80"
    networks: [app-net]

  notification:
    build:
      context: ./notification
      dockerfile: ./dockerfile
    container_name: notification_service
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: "dev_kafka:9092"
      PORT: "8080"
      SMTP_HOST: "mailpit"
      SMTP_PORT: "1025"
      SMTP_FROM: "no-reply@todo.local"
      AUTH_SERVICE_URL: "http://auth-service:8084"
    ports:
      - "8090:8080"
    networks: [app-net]

  # Realtime service (WebSocket)
  realtime:
    build:
      context: ./realtime
      dockerfile: ./dockerfile
    container_name: realtime_service
    depends_on:
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      KAFKA_BROKERS: "dev_kafka:9092"
      PORT: "8086"
    ports:
      - "8086:8086"
    networks: [app-net]

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_gateway
    depends_on:
      - auth-service
      - task-service
      - team-service
      - realtime
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks: [app-net]

  # Mailpit - dev SMTP + web UI
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    environment:
      MP_UI_BIND_ADDR: 0.0.0.0:8025
      MP_SMTP_BIND_ADDR: 0.0.0.0:1025
    ports:
      - "8025:8025"   # Web UI http://localhost:8025
      - "1025:1025"   # SMTP
    networks: [app-net]

  # Kafka (single-node KRaft for development)
  kafka:
    image: bitnami/kafka:3.7
    container_name: dev_kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@dev_kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://dev_kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3 
      - KAFKA_KRAFT_CLUSTER_ID=q1w2e3r4t5y6u7i8o9p0zxcvbnmasdf # dev-only
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "sh", "-lc", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    restart: unless-stopped
    networks: [app-net]

networks:
  app-net:
