openapi: 3.0.0
info:
  title: Team Service API
  version: 1.0.0
  description: >
    REST API for managing teams and team memberships.
    - Teams can have multiple members with different roles.
    - Users can belong to multiple teams.
    - Team membership controls access to team resources.

servers:
  - url: http://localhost:8083
    description: Local development server

paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: OK

  /teams:
    get:
      summary: List teams
      description: Returns teams. In current implementation, this endpoint is public.
      parameters:
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401': { $ref: '#/components/responses/Unauthorized' }

    post:
      summary: Create a new team
      description: Creates a new team with the caller as the owner. Public for now; add auth later.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeam'
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /teams/{id}:
    get:
      summary: Retrieve a single team
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: Team found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

    put:
      summary: Update a team
      description: Updates team information. Requires team membership (enforce role in middleware).
      parameters:
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeam'
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

    delete:
      summary: Delete a team
      description: Deletes a team. Only team owners can delete (middleware enforced).
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '204':
          description: Team deleted
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

  /teams/{id}/members:
    get:
      summary: List team members
      description: Requires team membership in middleware. Authorization header is required.
      parameters:
        - $ref: '#/components/parameters/TeamId'
      responses:
        '200':
          description: A list of team members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMember'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

    post:
      summary: Add member to team
      description: Adds a user to a team. Only team owners/admins can add members (middleware).
      parameters:
        - $ref: '#/components/parameters/TeamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMember'
      responses:
        '201':
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

  /teams/{id}/members/{userId}:
    delete:
      summary: Remove member from team
      description: Removes a user from a team. Only team owners/admins can remove members (middleware).
      parameters:
        - $ref: '#/components/parameters/TeamId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: Member removed
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/TeamNotFound' }

  /users/{userId}/teams:
    get:
      summary: List user's teams
      description: Returns teams that the user belongs to. Public in current implementation.
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/UserNotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TeamId:
      name: id
      in: path
      required: true
      description: Unique team ID
      schema: { type: integer, format: int64 }
    UserId:
      name: userId
      in: path
      required: true
      description: User ID
      schema: { type: integer, format: int64 }
    Query:
      name: q
      in: query
      required: false
      description: Search query for team name/description
      schema: { type: string }
    Limit:
      name: limit
      in: query
      required: false
      description: Page size (default 50, max 200)
      schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
    Offset:
      name: offset
      in: query
      required: false
      description: Offset for pagination (default 0)
      schema: { type: integer, minimum: 0, default: 0 }

  responses:
    Unauthorized:
      description: Missing or invalid credentials
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "UNAUTHORIZED", message: "Missing/invalid token" }
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "FORBIDDEN", message: "Insufficient permissions" }
    TeamNotFound:
      description: Team not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "NOT_FOUND", message: "Team not found" }
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "NOT_FOUND", message: "User not found" }
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "BAD_REQUEST", message: "Invalid team name" }

  schemas:
    Team:
      type: object
      required:
        [id, name, ownerId, createdAt, updatedAt]
      properties:
        id: { type: integer, format: int64, example: 1 }
        name: { type: string, example: "Development Team" }
        description: { type: string, nullable: true, example: "Main development team" }
        ownerId: { type: integer, format: int64, example: 3, description: "User who owns the team" }
        createdAt: { type: string, format: date-time, example: "2025-08-10T09:30:00Z" }
        updatedAt: { type: string, format: date-time, example: "2025-08-10T09:45:00Z" }

    NewTeam:
      type: object
      required: [name]
      properties:
        name: { type: string, example: "Development Team" }
        description: { type: string, nullable: true, example: "Main development team" }

    UpdateTeam:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }

    TeamMember:
      type: object
      required:
        [userId, teamId, role, joinedAt]
      properties:
        userId: { type: integer, format: int64, example: 5 }
        teamId: { type: integer, format: int64, example: 1 }
        role: { type: string, enum: ["owner", "admin", "member"], example: "member" }
        joinedAt: { type: string, format: date-time, example: "2025-08-10T10:00:00Z" }

    AddMember:
      type: object
      required: [userId, role]
      properties:
        userId: { type: integer, format: int64, example: 5 }
        role: { type: string, enum: ["admin", "member"], example: "member" }

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: "NOT_FOUND" }
        message: { type: string, example: "Team not found" }
