openapi: 3.0.0
info:
  title: Auth Service API
  version: 1.0.0
  description: >
    Authentication and User Management Service.
    - User registration and authentication
    - JWT token management
    - User profile management
    - Password management

servers:
  - url: http://localhost:8084
    description: Local development server

paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200':
          description: OK

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /validate:
    post:
      summary: Validate JWT access token
      description: Requires Authorization header; returns basic user info when token is valid.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    post:
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful

  /users:
    get:
      summary: List users (admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

    post:
      summary: Create user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /users/{id}:
    get:
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/UserNotFound' }

    put:
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/UserNotFound' }

    delete:
      summary: Delete user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User deleted successfully
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/UserNotFound' }

  /users/profile:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

    put:
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /users/change-password:
    post:
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: User ID
      schema: { type: integer, format: int64 }
    Query:
      name: q
      in: query
      required: false
      description: Search query for username/email
      schema: { type: string }
    Limit:
      name: limit
      in: query
      required: false
      description: Page size (default 50, max 200)
      schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
    Offset:
      name: offset
      in: query
      required: false
      description: Offset for pagination (default 0)
      schema: { type: integer, minimum: 0, default: 0 }

  responses:
    Unauthorized:
      description: Missing or invalid credentials
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "UNAUTHORIZED", message: "Missing/invalid token" }
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "FORBIDDEN", message: "Insufficient permissions" }
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "NOT_FOUND", message: "User not found" }
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "BAD_REQUEST", message: "Invalid input" }
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            ex:
              value: { code: "CONFLICT", message: "Username already exists" }

  schemas:
    User:
      type: object
      required:
        [id, username, email, role, createdAt, updatedAt]
      properties:
        id: { type: integer, format: int64, example: 1 }
        username: { type: string, example: "john_doe" }
        email: { type: string, example: "john@example.com" }
        firstName: { type: string, example: "John" }
        lastName: { type: string, example: "Doe" }
        role: { type: string, enum: ["user", "admin"], example: "user" }
        isActive: { type: boolean, example: true }
        createdAt: { type: string, format: date-time, example: "2025-08-10T09:30:00Z" }
        updatedAt: { type: string, format: date-time, example: "2025-08-10T09:45:00Z" }

    UserResponse:
      type: object
      required:
        [id, username, email, role, isActive, createdAt, updatedAt]
      properties:
        id: { type: integer, format: int64, example: 1 }
        username: { type: string, example: "john_doe" }
        email: { type: string, example: "john@example.com" }
        firstName: { type: string, example: "John" }
        lastName: { type: string, example: "Doe" }
        role: { type: string, enum: ["user", "admin"], example: "user" }
        isActive: { type: boolean, example: true }
        createdAt: { type: string, format: date-time, example: "2025-08-10T09:30:00Z" }
        updatedAt: { type: string, format: date-time, example: "2025-08-10T09:45:00Z" }

    RegisterRequest:
      type: object
      required: [username, email, password]
      properties:
        username: { type: string, example: "john_doe" }
        email: { type: string, example: "john@example.com" }
        password: { type: string, example: "securepassword123" }
        firstName: { type: string, example: "John" }
        lastName: { type: string, example: "Doe" }

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: "john_doe" }
        password: { type: string, example: "securepassword123" }

    LoginResponse:
      type: object
      required: [accessToken, refreshToken, user]
      properties:
        accessToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        refreshToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        user: { $ref: '#/components/schemas/UserResponse' }

    ValidateResponse:
      type: object
      required: [valid, user]
      properties:
        valid: { type: boolean, example: true }
        user:
          type: object
          required: [id, username, role]
          properties:
            id: { type: integer, format: int64, example: 1 }
            username: { type: string, example: "admin" }
            role: { type: string, enum: [user, admin], example: "admin" }

    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }

    CreateUserRequest:
      type: object
      required: [username, email, password, role]
      properties:
        username: { type: string, example: "jane_doe" }
        email: { type: string, example: "jane@example.com" }
        password: { type: string, example: "securepassword123" }
        firstName: { type: string, example: "Jane" }
        lastName: { type: string, example: "Doe" }
        role: { type: string, enum: ["user", "admin"], example: "user" }

    UpdateUserRequest:
      type: object
      properties:
        username: { type: string }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        role: { type: string, enum: ["user", "admin"] }
        isActive: { type: boolean }

    UpdateProfileRequest:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string }

    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword: { type: string, example: "oldpassword123" }
        newPassword: { type: string, example: "newpassword123" }

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: "BAD_REQUEST" }
        message: { type: string, example: "Invalid input" }
