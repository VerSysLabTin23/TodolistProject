# a template for the final docker compose file
name: todo-production

services:
  # Load Balancer
  load-balancer:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - frontend-1
      - frontend-2
    networks:
      - app-network

  # API Gateway (2 Instances)
  api-gateway-1:
    build: ./api-gateway
    ports:
      - "8081:8080"
    networks:
      - app-network

  api-gateway-2:
    build: ./api-gateway
    ports:
      - "8082:8080"
    networks:
      - app-network

  # Frontend App (React, 2 Instances)
  frontend-1:
    build: ./frontend
    ports:
      - "3001:80" # nginx only listens on 80 by default
    networks:
      - app-network

  frontend-2:
    build: ./frontend
    ports:
      - "3002:80"
    networks:
      - app-network

  # Authentication Service (2 Instances)
  auth-service-1:
    build: ./auth
    environment:
      - DB_HOST=auth-db
      - DB_NAME=auth
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - auth-db
    networks:
      - app-network

  auth-service-2:
    build: ./auth
    environment:
      - DB_HOST=auth-db
      - DB_NAME=auth
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - auth-db
    networks:
      - app-network

  auth-db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: auth
    networks:
      - app-network

  # Team Service (2 Instances)
  team-service-1:
    build: ./team
    environment:
      - DB_HOST=team-db
      - DB_NAME=team
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - team-db
    networks:
      - app-network

  team-service-2:
    build: ./team
    environment:
      - DB_HOST=team-db
      - DB_NAME=team
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - team-db
    networks:
      - app-network

  team-db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: team
    networks:
      - app-network

  # Task Service (2 Instances)
  task-service-1:
    build: ./task
    environment:
      - DB_HOST=task-db
      - DB_NAME=task
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - task-db
    networks:
      - app-network

  task-service-2:
    build: ./task
    environment:
      - DB_HOST=task-db
      - DB_NAME=task
      - DB_USER=root
      - DB_PASS=root
    depends_on:
      - task-db
    networks:
      - app-network

  task-db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: task
    networks:
      - app-network

  # Realtime Service
  realtime-service:
    build: ./realtime
    depends_on:
      - redis
    networks:
      - app-network

  # Notification Service
  notification-service:
    build: ./notification
    depends_on:
      - redis
    networks:
      - app-network

  # Redis for Pub/Sub and Stream
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
